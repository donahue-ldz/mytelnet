头文件<stdarg.h>
分类：个人日记 | 标签： 参数  list  start  函数  type 
2008-01-08 18:44 阅读(1717)评论(2)
1.要在函数中使用参数,首先要包含头文件<stdarg.h>。这个头文件声明了一个va_list类型，定义了四个宏，用来遍历可变参数列表。

void va_start(va_list ap, last);

type va_arg(va_list ap, type);

void va_end(va_list ap);

void va_copy(va_list dest, va_list src);

下面详细介绍这些宏定义：

2.void va_start(va_list ap, last)

va_start必须第一个调用，它初始化va_list类型的变量ap，使ap指向第一个可选参数。参数 last 是可变参数列表（即函数原型中的省略号…）的前一个参数的名字，也就是最后类型已确定的函数参数名。因为这个参数的地址将会被宏va_start用到，所以最好不要是寄存器变量，函数，或者数组。

对于有可变长参数，但是在可变长参数前没有任何的固定参数的函数，如int func (...)是不允许的。  这是ANSI C所要求的，变参函数在...之前至少得有一个固定参数。这个参数将被传递给va_start()，然后用va_arg()和va_end()来确定所有实际调用时可变长参数的类型和值。

type va_arg(va_list ap, type)
宏va_arg展开后是关于下一个参数的类型和值的表达式，参数type是明确的类型名。
va_arg返回参数列表中的当前参数并使ap指向参数列表中的下一个参数。 

void va_end(va_list ap)
每次调用va_start就必须相应的调用va_end销毁变量ap，即将指针ap置为NULL。

void va_copy(va_list dest, va_list src)
复制va_list类型的变量。
每次调用va_copy，也必须有相应的va_end调用。

调用者在实际调用参数个数可变的函数时，要通过一定的方法指明实际参数的个数，例如把最后一个参数置为空字符串（系统调用execl()就是这样的）、-1或其他的方式（函数printf()就是通过第一个参数，即输出格式的定义来确定实际参数的个数的）。 

3. 举例：

  #include <iostream.h> 
  #include <stdarg.h> 
  
int main() 
{int a,b,c,d,e; 
int max(int,int...); 
 cin>>a>>b>>c>>d>>e; 
 cout<<"The bigger between a and b is "<<max(2,a,b)<<endl; 
 cout<<"The bigger in the five number is "<<max(5,a,b,c,d,e)<<endl; 
return 0; 
} 
  
int max(int num,int integer...) 
{ va_list ap; 
  int m=integer; 
  va_start(ap,integer); 
  for(int i=1;i<num;i++) 
   { int t=va_arg(ap,int); 
     if (t>m)  m=t; 
 cout<<i<<endl; 
   } 
   va_end(ap); 
   return m; 
 }

 