来自服务器数据的主有限状态机  ---〉我们可以把该状态机看作是指明了客户如何处理从服务器收到的字符序列。
主有限状态机由文件common_fsm.c中的ttwrite函数实现，用于解释执行从socket接收到的字符。当数据从服务器到达时，执行此函数。其算法如下：
1. 根据主有限状态机的当前状态ttstate和传入字符c查找转移矩阵ttfsm[][]，得到一个整数索引值ti；
2. 用ti作为压缩的转移矩阵ttstab[]的数组下标，取得元素ttstab[ti]的地址，赋给pt；
3. 根据pt进行压缩的转移矩阵中指定的操作；
4. 转移到下一个状态。






套接字输出有限状态机----〉转移将客户从表示本地处理的状态带到表示(普通)远程系统交互的状态 说明：
用于定义对每个用户输入字符所做的动作。大多数字符被客户发送到远程服务器上去。但是，该设计允许用户从数据连接中退出，然后与本地客户程序交互。
套接字输出有限状态机的实现
套接字有限状态机由文件common_fsm.c中的sowrite函数实现，用于解释执行从键盘输入的字符。当键盘输入数据时，执行此函数。其实现与主有限状态机相似，其算法如下：
1. 根据主有限状态机的当前状态sostate和传入字符c查找转移矩阵sofsm[][]，得到一个整数索引值ki；
2. 用ki作为压缩的转移矩阵sostab[]的数组下标，取得元素sostab[ti]的地址，赋给pt；
3. 根据pt进行压缩的转移矩阵中指定的操作；
4. 转移到下一个状态。





选项子协商有限状态机-----〉它处理在选项子协商过程中到达的字符序列。因为它只识别一种可能的选项子协商(终端类型)，所以该有限状态机只需要三个状态。
主有限状态机由文件main_fsm.c中的subopt函数实现，用于子选项协商的处理。当从服务器接收到字符SB（代表子选项开始，详细解释见图2）时，主有限状态机调用此函数。其实现与主有限状态机相似，其算法如下：
1. 根据主有限状态机的当前状态substate和传入字符c查找转移矩阵subfsm[][]，得到一个整数索引值ti；
2. 用ti作为压缩的转移矩阵substab[]的数组下标，取得元素substab[ti]的地址，赋给pt；
3. 根据pt进行压缩的转移矩阵中指定的操作；
4. 转移到下一个状态。
