有限状态机的规约
Telnet协议规定了客户如何把字符传给远程服务，以及客户如何显示该远程服务所返回的数据。在连接上所进行的大多数通信都是由各个数据字符所组成的。在客户端，这些数据字符来自用户从键盘键入的数据；在服务器端，它们来自远程会话所产生的输出。除了数据字符以外，Telnet还允许客户和服务器交换控制信息。
大多数Telnet的实现都用有限状态机(Finite state machine，FSM)来说明命令序列的确切语法以及对命令序列的解释。作为规约工具，有限状态机提供了对协议的精确描述。它确切地说明了发送方如何在数据流中嵌入命令序列，同时，它也确切说明了接收方如何解释这种序列。更为重要的是，有限状态机可以直接转换成遵从该协议的程序。因此，可以验证最终的程序是否符合协议规约。
有限状态机的实现
由于构造有限状态机的有效实现是可能的，也由于这种机器能够很容易地描述面向字符的协议，三个独立的有限状态机：一个状态机控制客户如何对来自键盘的字符进行响应，另一个控制客户如何处理在TCP连接上到达的来自服务器的字符，第三个状态机处理选项子协商的细节。所有这三个有限状态机都使用同样的数据结构，这使操作这些数据结构的某些过程可以被共享。
有限状态机的状态转移图使用了传统的表示方法。从一个状态转换到另一状态都有—个形如α/β的标志．其中α表示引起该转移的特定输入字符，β表示发生该转移所完成的动作。从状态X转移到状态Y上如果有标志α/β，表示如果在状态X时字符α到达，执行动作β，然后转换到状态Y。
为了能高效地处理，我们的实现把有限状态机的转移编码成一个的转移矩阵。
 

每行对应一个状态而每列对应一个可能的输入字符，在运行时，客户端维护记录当前状态的变量。当有一个字符到达时，客户端用当前状态变量及该字符的数字值在转移矩阵中进行索引。当取得一个索引值，就可以执行该索引值指定的操作并转移到下一个状态。
4.1.3 压缩的有限状态机表示
用c代码来初始化一个大矩阵将是非常繁琐的。而且，如果转移矩阵的每个元素都要包含关于要采取的动作以及下一状态的全部信息，该矩阵将消耗很大的内存空间。为了使转移矩阵更小也为了使初始化的工作更为容易，我们的代码使用了有限状态机的压缩表示。
就本质来讲，所选的数据结构允许程序员构造一种压缩的数据结构，用它来表示有限状态机，并且让程序在运行时构造相关的转移矩阵。文件fsm_struct.h中包含了在压缩表示中所用的结构fsm_trans的声明：
/* 有限状态机转移矩阵复用结构 */
struct fsm_trans {
    unsigned char   ft_state;                                   /* 当前状态 */
    short          ft_char;                                   /* 输入字符 */
    unsigned char   ft_next;                                   /* 下一个状态 */
    int            (*ft_action)(FILE *sfp, FILE *tfp, int c);        /* 对应的操作 */
};
压缩的有限状态机表示由一维的fsm_trans结构数组组成。每个元索指定了一种转移。ft_state字段指明转移开始时的有限状态机状态，ft_next                                   字段指明了下一个状态，ft_char字段指定了引起转移的输入字符(或者用TC_ANY来表示没有明确声明的其他所有字符)，ft_action字段给出了要调用的过程的地址，用来完成与状态转移相关的动作。
4.1.4 在运行时压缩的有限状态机的表示
本客户端软件并没有把压缩表示中的所有信息都复制到转移矩阵中，而是采用了这样的方法，它不改变压缩表示的内容并用它来维护转移信息。为此，软件在转移矩阵的每个元素中存放一个整数。该整数是压缩表示数组中某一项的索引，而该项与所要进行的转移相对应。图4-2展示了该数据结构：


转移矩阵中的每一项都包含一个指向压缩表示中某元素的索引。运行时，根据有限状态机的当前状态和输入字符查找转移矩阵，得到一个整数索引值，该索引值就是压缩的转移矩阵的数组下标，然后根据该下标进行压缩的转移矩阵中指定的操作，并转移到下一个状态。
